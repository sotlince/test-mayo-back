# üè• Sistema Web Inclusivo para Atenci√≥n M√©dica
### Backend API Felipe Andr√©s Parra √Ålvarez

"Aplicaci√≥n backend accesible para gestionar atenci√≥n m√©dica de pacientes con discapacidad visual y auditiva, utilizando una arquitectura modular y segura."

Este repositorio contiene el backend de un sistema accesible para la atenci√≥n de pacientes con discapacidad visual y auditiva en centros m√©dicos. El sistema permite gestionar pacientes, citas, llamados y usuarios administrativos mediante una API REST construida con Node.js, Express y Supabase (PostgreSQL).

---

## ‚öôÔ∏è Tecnolog√≠as Utilizadas

- **Node.js + Express**: Framework principal del backend.
- **Supabase**: Plataforma Backend-as-a-Service con PostgreSQL.
- **JWT**: Manejo de autenticaci√≥n y roles.
- **UUID**: Identificaci√≥n √∫nica de usuarios, pacientes y citas.
- **Dotenv**: Manejo de variables de entorno.
- **Middleware personalizado**: Autenticaci√≥n por token y control de permisos por rol.

---

## üß† Arquitectura del Sistema

```
üì¶ backend_mvp/
 ‚î£ üìÇsrc/
 ‚îÉ ‚î£ üìÇcontrollers/          # L√≥gica de cada m√≥dulo (pacientes, citas, auth, llamados, reportes, usuarios)
 ‚îÉ ‚î£ üìÇroutes/               # Archivos de rutas por m√≥dulo
 ‚îÉ ‚î£ üìÇmiddleware/           # Autenticaci√≥n con JWT y control de roles
 ‚îÉ ‚î£ üìÇconfig/               # Conexi√≥n a Supabase (.env)
 ‚îÉ ‚îó üìúapp.js                # Configuraci√≥n principal de Express
 ‚î£ üìúserver.js               # Entrada del backend (corre app.js)
 ‚î£ üìú.env                    # Variables de entorno (secretos)
 ‚îó üìúREADME.md               # Este archivo
```

---

## üîê Autenticaci√≥n y Roles

- Implementado con **JWT**: cada login genera un token con `id` y `rol`
- Roles definidos: `Administrador`, `M√©dico`, `Secretaria`
- Cada ruta protegida usa `verificarToken` y `permitirRoles(...)`

---

## üóÉÔ∏è Base de Datos - Supabase (PostgreSQL)

### Tablas principales en 3FN:

- `usuarios`: Datos del personal administrativo y m√©dico (UUID, correo, rol, especialidad).
- `pacientes`: Datos detallados del paciente, discapacidad, contacto de emergencia.
- `citas`: Agendamiento m√©dico con estado (`Agendada`, `Atendida`, `Cancelada`).
- `llamados`: Historial y gesti√≥n del turno de atenci√≥n (incluye prioridad y tipo de notificaci√≥n).
- `roles`: Tabla asociada a usuarios con nombre de rol.
- `especialidades`: Especialidades m√©dicas (opcional, para m√©dicos).
- `sintomas`: Reportes detallados de s√≠ntomas por paciente.

üß© Relaciones clave:
- `citas.id_paciente` ‚Üí `pacientes.id_paciente`
- `citas.id_usuario` ‚Üí `usuarios.id_usuario`
- `llamados.id_usuario` ‚Üí `usuarios.id_usuario`

---

## üîÅ Flujo de Datos

```mermaid
graph TD
  Usuario[üë§ Usuario] -->|Login| Auth[üîê /auth/login]
  Auth -->|Token| Panel[üìã Panel Administrativo]
  Panel -->|GET| Pacientes[ü©∫ /api/pacientes]
  Panel -->|POST| Citas[üìÜ /api/citas]
  Panel -->|POST| Llamado[üì£ /api/llamados/:id]
  Supabase[(üõ¢Ô∏è Supabase PostgreSQL)] <-->|Consulta| Pacientes
  Supabase <-->|Inserci√≥n| Citas
  Supabase <-->|Actualizaci√≥n| Llamado
```

---

## ‚úÖ Endpoints disponibles (21)

- Autenticaci√≥n: login, registro, perfil
- Pacientes: CRUD completo + filtros
- Citas: CRUD completo + filtros
- Llamados: creaci√≥n, historial, actualizaci√≥n de estado, simulaci√≥n temporal
- Roles protegidos: cada ruta controla acceso con JWT + `permitirRoles(...)`

---

## üìå Requisitos No Funcionales cumplidos

- Modularidad
- Escalabilidad (estructura limpia por componentes)
- Preparado para HTTPS y bcrypt
- Contrase√±as hash (‚ö†Ô∏è pendiente para producci√≥n)
- Tiempo de respuesta promedio < 1 segundo (test en local)
- Protecci√≥n por rol y token JWT para cada acci√≥n cr√≠tica

---

## üß™ Testing y despliegue

- Probado con **Thunder Client** y **Postman**
- Backend listo para conectar con frontend en React o cualquier SPA
- Supabase como backend persistente: alta disponibilidad + backups

---

## ‚ú® Autor

Este backend desarrollado por **Felipe Andr√©s Parra √Ålvarez** permite gestionar pacientes, usuarios, citas, llamados y reportes m√©dicos en un entorno accesible para personas con discapacidad visual y auditiva.

---

## üîê Autenticaci√≥n (`/api/auth`)

| M√©todo | Endpoint             | Descripci√≥n                          |
|--------|----------------------|--------------------------------------|
| POST   | `/auth/login`        | Iniciar sesi√≥n y obtener token JWT   |
| POST   | `/auth/register`     | Registrar nuevo usuario (solo admin) |
| GET    | `/auth/profile`      | Obtener perfil del usuario logueado  |

---

## üë§ Usuarios (`/api/usuarios`)

> Requiere token con rol `Administrador`

| M√©todo | Endpoint                   | Descripci√≥n                      |
|--------|----------------------------|----------------------------------|
| GET    | `/api/usuarios`            | Listar todos los usuarios        |
| DELETE | `/api/usuarios/:id`        | Eliminar usuario por ID          |
| PUT    | `/api/usuarios/:id/rol`    | Actualizar el rol de un usuario  |

---

## üßë‚Äç‚öïÔ∏è Pacientes (`/api/pacientes`)

| M√©todo | Endpoint               | Descripci√≥n                               |
|--------|------------------------|-------------------------------------------|
| GET    | `/api/pacientes`       | Listar pacientes (p√∫blico)                |
| POST   | `/api/pacientes`       | Crear paciente (con validaci√≥n de RUT)    |
| GET    | `/api/pacientes/:id`   | Ver detalles (requiere token)             |
| PUT    | `/api/pacientes/:id`   | Editar paciente (m√©dico o admin)          |
| DELETE | `/api/pacientes/:id`   | Eliminar paciente (solo admin)            |

---

## üìÖ Citas (`/api/citas`)

| M√©todo | Endpoint            | Descripci√≥n                                     |
|--------|---------------------|-------------------------------------------------|
| GET    | `/api/citas`        | Listar citas (por rol)                          |
| POST   | `/api/citas`        | Crear nueva cita                                |
| GET    | `/api/citas/:id`    | Obtener cita por ID                             |
| PUT    | `/api/citas/:id`    | Editar cita                                     |
| DELETE | `/api/citas/:id`    | Cancelar cita (solo admin)                      |

---

## üì£ Llamados (`/api/llamados`)

| M√©todo   | Endpoint                  | Descripci√≥n
|----------|---------------------------|----------------------------------------------------------------------|
| GET      | /api/llamados             | Obtener los llamados activos (estado: Llamado) para mostrar en visor
| GET      | /api/llamados/ordenados   | Obtener llamados pendientes ordenados por urgencia y hora de ingreso
| POST     | /api/llamados/:pacienteId | Registrar nuevo llamado con estado Pendiente
| PUT      | /api/llamados/:id         | Actualizar estado del llamado (Llamado, Atendido, Cancelado, etc.)
| GET      | /api/llamados/historial   | Ver historial completo de llamados (solo Administrador)

---

## üìä Reportes (`/api/reportes`)

> Requieren token con rol `Administrador` o `Secretaria` seg√∫n el caso

| M√©todo | Endpoint                                | Descripci√≥n                                      |
|--------|-----------------------------------------|--------------------------------------------------|
| GET    | `/api/reportes/citas-atendidas`         | Citas atendidas entre fechas (`?desde&hasta`)   |
| GET    | `/api/reportes/citas-pendientes`        | Lista de citas agendadas                         |
| GET    | `/api/reportes/llamados-por-prioridad`  | Llamados agrupados por prioridad                 |
| GET    | `/api/reportes/usuarios-por-rol`        | Usuarios agrupados por rol (solo admin)         |

---

## üõ°Ô∏è Seguridad
- Token JWT requerido en la mayor√≠a de rutas protegidas
- Middleware de roles: `permitirRoles()` seg√∫n el contexto

---

